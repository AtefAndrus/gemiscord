/**
 * Model utility functions for handling model names and metadata
 */

/**
 * Convert model ID to user-friendly display name
 * Automatically generates display names from model IDs with optional overrides
 */
export function getModelDisplayName(
  modelId: string,
  displayNameOverrides?: Record<string, string>
): string {
  // Check for configured override first
  if (displayNameOverrides?.[modelId]) {
    return displayNameOverrides[modelId];
  }

  // Auto-generate display name from model ID
  return autoGenerateDisplayName(modelId);
}

/**
 * Auto-generate display name from model ID
 * Converts "gemini-2.5-flash" to "Gemini 2.5 Flash"
 */
function autoGenerateDisplayName(modelId: string): string {
  // Handle special cases for previews and beta versions
  let cleanId = modelId
    .replace(/-preview.*$/, " Preview")
    .replace(/-beta.*$/, " Beta")
    .replace(/-alpha.*$/, " Alpha");

  // Split by hyphens and capitalize each part
  const parts = cleanId.split("-");
  const displayParts = parts.map((part) => {
    // Handle version numbers (keep as-is)
    if (/^\d+(\.\d+)*$/.test(part)) {
      return part;
    }
    // Handle special terms
    if (part.toLowerCase() === "lite") {
      return "Lite";
    }
    // Capitalize first letter
    return part.charAt(0).toUpperCase() + part.slice(1);
  });

  return displayParts.join(" ");
}

/**
 * Create Discord command choices from available models
 */
export function createModelChoices(
  availableModels: string[],
  displayNameOverrides?: Record<string, string>
): Array<{ name: string; value: string }> {
  return availableModels.map((modelId) => ({
    name: getModelDisplayName(modelId, displayNameOverrides),
    value: modelId,
  }));
}

/**
 * Validate if a model ID is valid
 */
export function isValidModel(
  modelId: string,
  availableModels: string[]
): boolean {
  return availableModels.includes(modelId);
}
